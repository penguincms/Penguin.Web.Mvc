<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Web.Mvc</name>
    </assembly>
    <members>
        <member name="T:Penguin.Web.Mvc.Attributes.IsLocalAttribute">
            <summary>
            Throws a security exception if the connection calling the action is not local
            </summary>
        </member>
        <member name="M:Penguin.Web.Mvc.Extensions.ActionResultExtensions.Capture(Microsoft.AspNetCore.Mvc.ActionResult,Microsoft.AspNetCore.Mvc.ControllerContext)">
            <summary>
            Captures the result and returns a string
            </summary>
            <param name="result">The result to capture</param>
            <param name="controllerContext">The current controller context</param>
            <returns>The result in string form</returns>
        </member>
        <member name="M:Penguin.Web.Mvc.Extensions.ControllerExtensions.RenderViewAsync``1(Microsoft.AspNetCore.Mvc.Controller,System.String,``0,System.Boolean)">
            <summary>
            Renders the view to a string
            </summary>
            <typeparam name="TModel">The object model type</typeparam>
            <param name="controller">The current controller</param>
            <param name="viewName">The view name</param>
            <param name="model">The view model</param>
            <param name="partial">True if the view is a partial</param>
            <returns>A task that will contain the result of the render</returns>
        </member>
        <member name="M:Penguin.Web.Mvc.Extensions.HttpRequestExtensions.IsLocal(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            True if the request is coming from localhost
            </summary>
            <param name="req">The request to check</param>
            <returns>True if the request is coming from localhost</returns>
        </member>
        <member name="M:Penguin.Web.Mvc.Extensions.HttpRequestExtensions.Referer(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Returns the request referer
            </summary>
            <param name="request">The request to get the referer for</param>
            <returns>The referer</returns>
        </member>
        <member name="M:Penguin.Web.Mvc.Extensions.HttpRequestExtensions.Url(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Gets the full request Url
            </summary>
            <param name="request">The request to check</param>
            <returns>The request Url</returns>
        </member>
        <member name="P:Penguin.Web.Mvc.Extensions.IHostingEnvironmentExtensions.IsHosted">
            <summary>
            True if hosted on IIS
            </summary>
        </member>
        <member name="M:Penguin.Web.Mvc.Extensions.IHostingEnvironmentExtensions.MapApplication(Microsoft.AspNetCore.Hosting.IHostingEnvironment,System.String)">
            <summary>
            Maps the path to the content root path
            </summary>
            <param name="hostingEnvironment">The current hosting environment</param>
            <param name="virtualPath">The path to map</param>
            <returns>The absolute mapped path</returns>
        </member>
        <member name="M:Penguin.Web.Mvc.Extensions.IHostingEnvironmentExtensions.MapPath(Microsoft.AspNetCore.Hosting.IHostingEnvironment,System.String)">
            <summary>
            Maps the path to the content root path
            </summary>
            <param name="hostingEnvironment">The current hosting environment</param>
            <param name="virtualPath">The path to map</param>
            <returns>The absolute mapped path</returns>
        </member>
        <member name="M:Penguin.Web.Mvc.Extensions.IHostingEnvironmentExtensions.MapPublic(Microsoft.AspNetCore.Hosting.IHostingEnvironment,System.String)">
            <summary>
            Maps the path to the www root path
            </summary>
            <param name="hostingEnvironment">The current hosting environment</param>
            <param name="virtualPath">The path to map</param>
            <returns>The absolute mapped path</returns>
        </member>
        <member name="T:Penguin.Web.Mvc.ResponseCapture">
            <summary>
            Captures an HTTP response to a string
            </summary>
        </member>
        <member name="M:Penguin.Web.Mvc.ResponseCapture.#ctor(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            Constructs the class using the given response
            </summary>
            <param name="response">The response to capture</param>
        </member>
        <member name="M:Penguin.Web.Mvc.ResponseCapture.Dispose">
            <summary>
            Disposes of the capture and releases resources
            </summary>
        </member>
        <member name="M:Penguin.Web.Mvc.ResponseCapture.ToString">
            <summary>
            Converts the resposne to a string
            </summary>
            <returns>The response as a string</returns>
        </member>
        <member name="T:Penguin.Web.Mvc.RouteInfo">
            <summary>
            A class containing route information
            </summary>
        </member>
        <member name="P:Penguin.Web.Mvc.RouteInfo.Action">
            <summary>
            The route action
            </summary>
        </member>
        <member name="P:Penguin.Web.Mvc.RouteInfo.Area">
            <summary>
            The route Area
            </summary>
        </member>
        <member name="P:Penguin.Web.Mvc.RouteInfo.Controller">
            <summary>
            The route controller
            </summary>
        </member>
        <member name="P:Penguin.Web.Mvc.RouteInfo.IsArea">
            <summary>
            Returns true if Area is set
            </summary>
        </member>
        <member name="M:Penguin.Web.Mvc.RouteInfo.#ctor(Microsoft.AspNetCore.Routing.RouteData)">
            <summary>
            Constructs a new instance of this class using the provided route data
            </summary>
            <param name="toParse">the route data to use to populate the instance</param>
        </member>
        <member name="T:Penguin.Web.Mvc.ViewParameters">
            <summary>
            A class representing a set of view parameters
            </summary>
        </member>
        <member name="P:Penguin.Web.Mvc.ViewParameters.MasterName">
            <summary>
            The Master Name
            </summary>
        </member>
        <member name="P:Penguin.Web.Mvc.ViewParameters.Model">
            <summary>
            The View Model
            </summary>
        </member>
        <member name="P:Penguin.Web.Mvc.ViewParameters.ViewName">
            <summary>
            The View Name
            </summary>
        </member>
        <member name="M:Penguin.Web.Mvc.ViewParameters.#ctor(System.String,System.String,System.Object)">
            <summary>
            Constructs the class with the given parameters
            </summary>
            <param name="viewName">The view name</param>
            <param name="masterName">The master name</param>
            <param name="model">The view model</param>
        </member>
        <member name="M:Penguin.Web.Mvc.ViewParameters.#ctor(System.String,System.Object)">
            <summary>
            Constructs the class with the given parameters
            </summary>
            <param name="viewName">The view name</param>
            <param name="model">The view model</param>
        </member>
        <member name="T:Penguin.Web.Mvc.ViewRenderService">
            <summary>
            Contains a method to render a view to an HTML string representation
            </summary>
        </member>
        <member name="M:Penguin.Web.Mvc.ViewRenderService.#ctor(Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine,Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider,System.IServiceProvider)">
            <summary>
            Constructs a new instance of the view render service
            </summary>
            <param name="razorViewEngine">A view engine implementation</param>
            <param name="tempDataProvider">A temp data provider</param>
            <param name="serviceProvider">A service provider for injection</param>
        </member>
        <member name="M:Penguin.Web.Mvc.ViewRenderService.RenderToStringAsync(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Renders a view by path, to an HTML string
            </summary>
            <param name="viewName">The name/path of the view</param>
            <param name="ExecutingPath">The executing path of the context in which its being requested</param>
            <param name="model">The model to pass into the view</param>
            <param name="Get">Used to determine whether or not the underlying FindView uses FindView or GetView</param>
            <returns>A task containing the result of an async rendering of an MVC view</returns>
        </member>
    </members>
</doc>
